blueprint:
  name: Presence-and-Temperature AC Control (Heat & Cool)
  description: >
    Controls an AC/Heat pump based on presence and temperature. Switches between cooling and heating modes
    automatically based on temperature thresholds. Turns off when room is unoccupied.
    Periodically checks to ensure climate control status matches desired conditions.
  domain: automation
  input:
    presence_sensor:
      name: Presence Sensor
      selector:
        entity:
          domain: binary_sensor
    temperature_sensor:
      name: Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    climate_unit:
      name: Climate Control Unit
      selector:
        entity:
          domain: climate
    cool_threshold:
      name: Cooling Threshold (turn on cooling above this)
      default: 25
      selector:
        number:
          min: 20
          max: 35
          unit_of_measurement: 째C
    heat_threshold:
      name: Heating Threshold (turn on heating below this)
      default: 18
      selector:
        number:
          min: 10
          max: 25
          unit_of_measurement: 째C
    target_cool_temp:
      name: Target Temperature for Cooling
      default: 23
      selector:
        number:
          min: 18
          max: 30
          unit_of_measurement: 째C
    target_heat_temp:
      name: Target Temperature for Heating
      default: 21
      selector:
        number:
          min: 15
          max: 28
          unit_of_measurement: 째C
    delay_off:
      name: Delay before turning off (minutes)
      default: 5
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: minutes
    check_interval:
      name: Status Check Interval (minutes)
      description: How often to verify and update climate control status
      default: 5
      selector:
        number:
          min: 1
          max: 30
          unit_of_measurement: minutes

trigger:
  # Event-based triggers
  - platform: state
    entity_id: !input presence_sensor
    id: "presence_trigger"
  - platform: numeric_state
    entity_id: !input temperature_sensor
    above: !input cool_threshold
    id: "temp_high_trigger"
  - platform: numeric_state
    entity_id: !input temperature_sensor
    below: !input heat_threshold
    id: "temp_low_trigger"
  # Time-based periodic check with variable interval
  - platform: time_pattern
    minutes: "*"
    id: "time_check"

variables:
  check_minutes: !input check_interval
  trigger_type: "{{ trigger.id }}"
  climate_unit: !input climate_unit
  target_cool_temp: !input target_cool_temp
  target_heat_temp: !input target_heat_temp

condition:
  - condition: or
    conditions:
      # Allow all non-time-based triggers to pass through
      - condition: not
        conditions:
          - condition: template
            value_template: "{{ trigger_type == 'time_check' }}"
      # For time-based trigger, only allow at specified intervals
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ trigger_type == 'time_check' }}"
          - condition: template
            value_template: "{{ now().minute % check_minutes == 0 }}"

action:
  - choose:
      # Cooling mode when too warm
      - conditions:
          - condition: and
            conditions:
              - condition: state
                entity_id: !input presence_sensor
                state: "on"
              - condition: numeric_state
                entity_id: !input temperature_sensor
                above: !input cool_threshold
              # Only switch to cooling if not already cooling at target temp
              - condition: or
                conditions:
                  - condition: not
                    conditions:
                      - condition: state
                        entity_id: !input climate_unit
                        state: "cool"
                  - condition: template
                    value_template: >
                      {{ state_attr(states(trigger.variables.climate_unit), 'temperature') != trigger.variables.target_cool_temp }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_unit
            data:
              hvac_mode: cool
          - service: climate.set_temperature
            target:
              entity_id: !input climate_unit
            data:
              temperature: !input target_cool_temp

      # Heating mode when too cold
      - conditions:
          - condition: and
            conditions:
              - condition: state
                entity_id: !input presence_sensor
                state: "on"
              - condition: numeric_state
                entity_id: !input temperature_sensor
                below: !input heat_threshold
              # Only switch to heating if not already heating at target temp
              - condition: or
                conditions:
                  - condition: not
                    conditions:
                      - condition: state
                        entity_id: !input climate_unit
                        state: "heat"
                  - condition: template
                    value_template: >
                      {{ state_attr(states(trigger.variables.climate_unit), 'temperature') != trigger.variables.target_heat_temp }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_unit
            data:
              hvac_mode: heat
          - service: climate.set_temperature
            target:
              entity_id: !input climate_unit
            data:
              temperature: !input target_heat_temp

      # Turn off when no presence
      - conditions:
          - condition: and
            conditions:
              - condition: state
                entity_id: !input presence_sensor
                state: "off"
              # Only turn off if not already off
              - condition: not
                conditions:
                  - condition: state
                    entity_id: !input climate_unit
                    state: "off"
        sequence:
          - delay:
              minutes: !input delay_off
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_unit
            data:
              hvac_mode: "off"

      # Comfort zone - temperature is good, turn off climate control
      - conditions:
          - condition: and
            conditions:
              - condition: numeric_state
                entity_id: !input temperature_sensor
                below: !input cool_threshold
              - condition: numeric_state
                entity_id: !input temperature_sensor
                above: !input heat_threshold
              # Only turn off if not already off
              - condition: not
                conditions:
                  - condition: state
                    entity_id: !input climate_unit
                    state: "off"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_unit
            data:
              hvac_mode: "off"

mode: restart
