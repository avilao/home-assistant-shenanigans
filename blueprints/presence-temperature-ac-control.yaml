blueprint:
  name: Presence-and-Temperature AC Control (Heat & Cool)
  description: >
    Controls an AC/Heat pump based on presence and temperature. Switches between cooling and heating modes
    automatically based on temperature thresholds. Turns off when room is unoccupied.
    Checks conditions periodically and when presence changes.
  domain: automation
  input:
    presence_sensor:
      name: Presence Sensor
      selector:
        entity:
          domain: binary_sensor
    temperature_sensor:
      name: Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    climate_unit:
      name: Climate Control Unit
      selector:
        entity:
          domain: climate
    cool_threshold:
      name: Cooling Threshold (turn on cooling above this)
      default: 25
      selector:
        number:
          min: 20
          max: 35
          unit_of_measurement: 째C
    heat_threshold:
      name: Heating Threshold (turn on heating below this)
      default: 18
      selector:
        number:
          min: 10
          max: 25
          unit_of_measurement: 째C
    target_cool_temp:
      name: Target Temperature for Cooling
      default: 23
      selector:
        number:
          min: 18
          max: 30
          unit_of_measurement: 째C
    target_heat_temp:
      name: Target Temperature for Heating
      default: 21
      selector:
        number:
          min: 15
          max: 28
          unit_of_measurement: 째C
    check_interval:
      name: Status Check Interval (minutes)
      description: How often to verify and update climate control status
      default: 5
      selector:
        number:
          min: 1
          max: 30
          unit_of_measurement: minutes
    independent_sensor:
      name: Independent Power Sensor
      description: Binary sensor that confirms if the unit is on/off
      selector:
        entity:
          domain: binary_sensor

trigger:
  # Regular interval check
  - platform: time_pattern
    minutes: "*"
    id: "time_check"

variables:
  check_minutes: !input check_interval
  climate_unit: !input climate_unit
  target_cool_temp: !input target_cool_temp
  target_heat_temp: !input target_heat_temp

condition:
  # Only allow at specified intervals
  - condition: template
    value_template: "{{ now().minute % check_minutes == 0 }}"

action:
  - service: persistent_notification.create
    data:
      message: >
        Checking conditions:
        Time check: {{ now().minute % check_minutes == 0 }}
        Climate unit state: {{ states(climate_unit) }}
        Independent sensor state: {{ states(input.independent_sensor) }}
        Presence sensor state: {{ states(input.presence_sensor) }}
        Temperature: {{ states(input.temperature_sensor) }}
      title: "AC Control Debug"
  - choose:
      # Turn off when independent sensor doesn't match climate state
      - conditions:
          - condition: template
            value_template: >
              {{ states(climate_unit) == 'off' and states(input.independent_sensor) == 'on' or
                 states(climate_unit) != 'off' and states(input.independent_sensor) == 'off' }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_unit
            data:
              hvac_mode: "off"

      # Cooling mode when too warm
      - conditions:
          - condition: state
            entity_id: !input presence_sensor
            state: "on"
          - condition: numeric_state
            entity_id: !input temperature_sensor
            above: !input cool_threshold
          # Check if action is needed (unit is off or in wrong mode)
          - condition: or
            conditions:
              - condition: state
                entity_id: !input climate_unit
                state: "off"
              - condition: template
                value_template: >
                  {{ states(climate_unit) != 'cool' }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_unit
            data:
              hvac_mode: cool
          - service: climate.set_temperature
            target:
              entity_id: !input climate_unit
            data:
              temperature: !input target_cool_temp

      # Heating mode when too cold
      - conditions:
          - condition: state
            entity_id: !input presence_sensor
            state: "on"
          - condition: numeric_state
            entity_id: !input temperature_sensor
            below: !input heat_threshold
          # Check if action is needed (unit is off or in wrong mode)
          - condition: or
            conditions:
              - condition: state
                entity_id: !input climate_unit
                state: "off"
              - condition: template
                value_template: >
                  {{ states(climate_unit) != 'heat' }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_unit
            data:
              hvac_mode: heat
          - service: climate.set_temperature
            target:
              entity_id: !input climate_unit
            data:
              temperature: !input target_heat_temp

      # Turn off when no presence
      - conditions:
          - condition: state
            entity_id: !input presence_sensor
            state: "off"
          # Only turn off if not already off
          - condition: not
            conditions:
              - condition: state
                entity_id: !input climate_unit
                state: "off"
        sequence:
          - delay:
              seconds: "{{ (check_minutes * 60) - 30 }}"
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_unit
            data:
              hvac_mode: "off"

      # Turn off when temperature is in comfort zone
      - conditions:
          - condition: numeric_state
            entity_id: !input temperature_sensor
            below: !input cool_threshold
          - condition: numeric_state
            entity_id: !input temperature_sensor
            above: !input heat_threshold
          # Only turn off if not already off
          - condition: not
            conditions:
              - condition: state
                entity_id: !input climate_unit
                state: "off"
        sequence:
          - delay:
              seconds: "{{ (check_minutes * 60) - 30 }}"
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_unit
            data:
              hvac_mode: "off"

mode: restart
